version: '3'
services:
  db:
    container_name: mysql
    build:
      context: ./db
      dockerfile: Dockerfile
    ports:
      - 3306:3306
    volumes:
      - ./db/store:/var/lib/mysql
    networks:
      - network

  backend:
    container_name: backend
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: always
    ports:
      - 8080:8080
    depends_on:
      - db
    environment:
      SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL}
      SPRING_DATASOURCE_DRIVER: ${SPRING_DATASOURCE_DRIVER}
      SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
    logging:
      driver: awslogs
      options:
        awslogs-region: "ap-northeast-2"
        awslogs-group: "docker-log"
        awslogs-multiline-pattern: "^(INFO|ERROR)"
        awslogs-stream: "docker-backend"
    networks:
      - network

#  frontend:
#    container_name: front
#    build:
#      context: ./frontend
#      dockerfile: Dockerfile
#    restart: always
#    ports:
#      - 80:80
#    depends_on:
#      - backend
#    networks:
#      - network

networks:
  network:

# 엔진엑스에 대한 메모
# react에서 기본적으로 요청을 보낼 떄 앞에 도메인을 생략하면 현재 페이지가 띄워저 있는 도메인에 요청을 보낸다.
#위와 같이 react에서 생성한 정적파일만 복사하여 nginx 서버에서 띄운 경우.
# react의 도메인이 생략된 요청은 nginx로 보내지게 된다.
# 그러나 pakage.json 도커 컨테이너로 복사하여 npm build한 경우 리액트 서버가 구동되고, 이 떄 리액트에서
# 도메인이 생략된 요청은 리액트 서버로 보내지게 된다 localhost:3000/api 이런식으로,,,
# 따라서 백엔드 서버로 요청을 보내기 위해서는 다음과 같이 도메인을 명시해야 한다. localhost:8080/api/~
# 하지만 지금까지 가장 괜찮은 방법은 정적 파일들만 복사하여 도메인을 생략하여 요청을 보내고 nginx:80포트로 요청이 보내지고,
# /api 경로를 프록시가 백엔드 서버로 보내주도록 설정하는 것이 제일 낫다.